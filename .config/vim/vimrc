" vim:fdm=marker

" Encoding {{{
set encoding=utf-8 nobomb " BOM often causes trouble
scriptencoding utf-8
" }}}

" Settings -------------------------------------------------------------

" Preamble {{{

" Local Directories and cache files {{{
set undodir=$XDG_DATA_HOME/vim/undo//
set directory=$XDG_DATA_HOME/vim/swaps//
set backupdir=$XDG_DATA_HOME/vim/backups//
set runtimepath=$XDG_CONFIG_HOME/vim,$VIMRUNTIME,$XDG_CONFIG_HOME/vim/after
" }}}

" Incompatible with Neovim {{{`
if !has('nvim')
  set esckeys " Allow cursor keys in insert mode
  set ttymouse=xterm " Set mouse type to xterm
  set viminfo=%,'9999,s512,n$XDG_CACHE_HOME/vim/viminfo " Restore buffer list, marks are remembered for 9999 files, registers up to 512Kb are remembered
else
  set viminfo=%,'9999,s512,n$XDG_CACHE_HOME/nvim/nviminfo " Restore buffer list, marks are remembered for 9999 files, registers up to 512Kb are remembered
endif
" }}}

" Syntax Highlighting {{{
set background=dark
syntax on
" colorscheme gruvbox
" }}}

" Mapleader {{{
let mapleader=','
" }}}


" Set some junk {{{
set autoindent " Copy indent from last line when starting new line
set backspace=indent,eol,start
set cursorline " Highlight current line
set clipboard=unnamed " System clipboard integration
set diffopt=filler " Add vertical spaces to keep right and left aligned
set diffopt+=iwhite " Ignore whitespace changes (focus on code changes)
set expandtab " Expand tabs to spaces
set foldcolumn=0 " Column to show folds
set foldenable " Enable folding
set foldlevel=10 " Close all folds by default
set foldmethod=syntax " Syntax are used to specify folds
set foldminlines=0 " Allow folding single lines
set foldnestmax=5 " Set max fold nesting level
set formatoptions=
set formatoptions+=c " Format comments
set formatoptions+=r " Continue comments by default
set formatoptions+=o " Make comment when using o or O from comment line
set formatoptions+=q " Format comments with gq
set formatoptions+=n " Recognize numbered lists
set formatoptions+=2 " Use indent from 2nd line of a paragraph
set formatoptions+=l " Don't break lines that are already long
set formatoptions+=1 " Break before 1-letter words
set gdefault " By default add g flag to search/replace. Add g to toggle
set hidden " When a buffer is brought to foreground, remember undo history and marks
set history=1000 " Increase history from 20 default to 1000
set hlsearch " Highlight searches
set ignorecase " Ignore case of searches
set incsearch " Highlight dynamically as pattern is typed
set laststatus=2 " Always show status line
set lazyredraw " Don't redraw when we don't have to
set magic " Enable extended regexes
set nomodeline " Disable modeline
set modelines=0 " Just in case
set mouse=a " Enable mouse in all in all modes
set noerrorbells " Disable error bells
set nojoinspaces " Only insert single space after a '.', '?' and '!' with a join command
set noshowmode " Don't show the current mode (airline.vim takes care of us)
set nostartofline " Don't reset cursor to start of line when moving around
set nowrap " Do not wrap lines
set number " Enable line numbers
set omnifunc=syntaxcomplete#Complete " Set omni-completion method
set report=0 " Show all changes
set ruler " Show the cursor position
set scrolloff=3 " Start scrolling three lines before horizontal border of window
set shiftwidth=2 " The # of spaces for indenting
set shortmess=atI " Don't show the intro message when starting vim
set showtabline=2 " Always show tab bar
set sidescrolloff=3 " Start scrolling three columns before vertical border of window
set smartcase " Ignore 'ignorecase' if search patter contains uppercase characters
set smarttab " At start of line, <Tab> inserts shiftwidth spaces, <Bs> deletes shiftwidth spaces
set softtabstop=2 " Tab key results in 2 spaces
set spellfile=$XDG_CONFIG_HOME/vim/spell/infosec.utf-8.add
set splitbelow " New window goes below
set splitright " New windows goes right
set suffixes=.bak,~,.swp,.swo,.o,.d,.info,.aux,.log,.dvi,.pdf,.bin,.bbl,.blg,.brf,.cb,.dmg,.exe,.ind,.idx,.ilg,.inx,.out,.toc,.pyc,.pyd,.dll
set switchbuf=""
set tags=tags " Tags file for cTags
set title " Show the filename in the window titlebar
set ttyfast " Send more characters at a given time
set undofile " Persistent Undo
set visualbell " Use visual bell instead of audible bell (annnnnoying)
set wildchar=<TAB> " Character for CLI expansion (TAB-completion)
set wildignore+=.DS_Store
set wildignore+=*.jpg,*.jpeg,*.gif,*.png,*.gif,*.psd,*.o,*.obj,*.min.js
set wildignore+=*/bower_components/*,*/node_modules/*
set wildignore+=*/smarty/*,*/vendor/*,*/.git/*,*/.hg/*,*/.svn/*,*/.sass-cache/*,*/log/*,*/tmp/*,*/build/*,*/ckeditor/*,*/doc/*,*/source_maps/*,*/dist/*
set wildmenu " Hitting TAB in command mode will show possible completions above command line
set wildmode=list:longest " Complete only until point of ambiguity
set winminheight=0 " Allow splits to be reduced to a single line
set wrapscan " Searches wrap around end of file
" }}}

" }}}

" Configuration -------------------------------------------------------------

" FastEscape {{{
" Speed up transition from modes
set ttimeoutlen=10 timeoutlen=1000
" }}}

" General {{{
augroup general_config
  autocmd!

  " Sudo write (,W) {{{
  noremap <leader>W :w !sudo tee %<CR>
  " }}}

  " Remap :W to :w {{{
  command! W w
  " }}}

  " Remap :Q to :q {{{
  command! Q q
  " }}}
 
  " Toggle show tabs and trailing spaces (,c) {{{
  set listchars=tab:›\ ,trail:·,eol:¬,nbsp:_
  set fillchars=fold:-
  nnoremap <silent> <leader>c :set nolist!<CR>
  " }}}

  " Paste toggle (,p) {{{
  set pastetoggle=<leader>p
  map <leader>p :set invpaste paste?<CR>
  " }}}

  " Insert newline {{{
  map <leader><Enter> o<ESC>
  " }}}
  
  " Clear hlsearch pattern {{{
  noremap <silent> <C-h> :let @/ = ""<CR>
  " }}}

  " Strip trailing whitespace (,ss) {{{
  function! StripWhitespace () " {{{
    let save_cursor = getpos('.')
    let old_query = getreg('/')
    :%s/\s\+$//e
    call setpos('.', save_cursor)
    call setreg('/', old_query)
  endfunction " }}}
  noremap <leader>ss :call StripWhitespace ()<CR>
  " }}}
  
  " Join lines and restore cursor location (J) {{{
  nnoremap J mjJ`j
  " }}}

  " Fix page up and down {{{
  map <PageUp> <C-U>
  map <PageDown> <C-D>
  imap <PageUp> <C-O><C-U>
  imap <PageDown> <C-O><C-D>
  " }}}
  
  " jj, jk, kj to <ESC> {{{
   imap jj <Esc>
   imap jk <Esc>
   imap kj <Esc>
  " }}}

  " Disable Ex-MOde {{{
   map Q <Nop> 
   map q <Nop>
  " }}}
augroup END
" }}}

" Tabs {{{
augroup tab_control
  autocmd!
  map gt :tabn<CR>
  map gT :tabp<CR>
augroup END
" }}}

" Buffers {{{
augroup buffer_control
  autocmd!

  " " Prompt for buffer to select (,bs) {{{
  " nnoremap <leader>bs :CtrlPBuffer<CR>
  " }}}
  
  " Buffer navigation (,,) (gb) (gB) (,ls) {{{
  map <Leader>, <C-^>
  map <Leader>ls :buffers<CR>
  map gb :bnext<CR>
  map gB :bprev<CR>
  " }}}

  " New Buffer (,T) {{{
  map <Leader>T :enew<cr>
  " }}}

  " Close buffer {{{
  map <Leader>bq :bp <BAR> bd #<CR>
  " }}}

   " Jump to buffer number (<N>gb) {{{
  let c = 1
  while c <= 99
    execute 'nnoremap ' . c . 'gb :' . c . 'b\<CR>'
    let c += 1
  endwhile
  " }}}
  
   " Close Quickfix window (,qq) {{{
  map <leader>qq :cclose<CR>
  " }}}
augroup END
" }}}

" Jumping to tags {{{
augroup jump_to_tags
  autocmd!

  " Basically, <c-]> jumps to tags (like normal) and <c-\> opens the tag in a new
  " split instead.
  "
  " Both of them will align the destination line to the upper middle part of the
  " screen.  Both will pulse the cursor line so you can see where the hell you
  " are.  <c-\> will also fold everything in the buffer and then unfold just
  " enough for you to see the destination line.
  nnoremap <c-]> <c-]>mzzvzz15<c-e>`z:Pulse<cr>
  nnoremap <c-\> <c-w>v<c-]>mzzMzvzz15<c-e>`z:Pulse<cr>

  " Pulse Line (thanks Steve Losh)
  function! s:Pulse() " {{{
    redir => old_hi
    silent execute 'hi CursorLine'
    redir END
    let old_hi = split(old_hi, '\n')[0]
    let old_hi = substitute(old_hi, 'xxx', '', '')

    let steps = 8
    let width = 1
    let start = width
    let end = steps * width
    let color = 233

    for i in range(start, end, width)
      execute 'hi CursorLine ctermbg=' . (color + i)
      redraw
      sleep 6m
    endfor
    for i in range(end, start, -1 * width)
      execute 'hi CursorLine ctermbg=' . (color + i)
      redraw
      sleep 6m
    endfor

    execute 'hi ' . old_hi
  endfunction " }}}

  command! -nargs=0 Pulse call s:Pulse()
augroup END
" }}}

" Word Processor Mode {{{
augroup word_processor_mode
  autocmd!

  function! WordProcessorMode() " {{{
    setlocal formatoptions=t1
    map j gj
    map k gk
    setlocal smartindent
    setlocal spell spelllang=en_us
    setlocal noexpandtab
    setlocal wrap
    setlocal linebreak
    Goyo 100
  endfunction " }}}
  com! WP call WordProcessorMode()

  function! s:goyo_enter()
    let b:quitting = 0
    let b:quitting_bang = 0
    autocmd QuitPre <buffer> let b:quitting = 1
    cabbrev <buffer> q! let b:quitting_bang = 1 <bar> q!
  endfunction

  function! s:goyo_leave()
    " Quit Vim if this is the only remaining buffer
    if b:quitting && len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1
      if b:quitting_bang
        qa!
      else
        qa
      endif
    endif
  endfunction

  if exists('g:wp_mode')
    autocmd! User GoyoEnter call <SID>goyo_enter()
    autocmd! User GoyoLeave call <SID>goyo_leave()
  endif

augroup END
" }}}

" Restore Cursor Position {{{
augroup restore_cursor
  autocmd!

  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif
augroup END
" }}}

" Plugin Configuration -------------------------------------------------------------

" Airline.vim {{{
augroup airline_config
  autocmd!
  let g:airline_powerline_fonts = 1
  let g:airline_enable_ale = 1
  let g:airline#extensions#tabline#buffer_nr_format = '%s '
  let g:airline#extensions#tabline#buffer_nr_show = 1
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#fnamecollapse = 0
  let g:airline#extensions#tabline#fnamemod = ':t'
augroup END
" }}}

" Coc.vim {{{
augroup coc_config 
  autocmd!
  let g:coc_disable_startup_warning = 1
augroup END
" }}}

" Dispatch {{{
augroup dispatch_config
  autocmd!
  nnoremap <F5> :Dispatch<CR>
augroup END
" }}}

" EasyAlign.vim {{{
augroup easy_align_config
  autocmd!
  " Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
  vmap <Enter> <Plug>(EasyAlign) 
  " Start interactive EasyAlign for a motion/text object (e.g. <Leader>aip)
  nmap <Leader>a <Plug>(EasyAlign) 
augroup END
" }}}

" RainbowParentheses.vim {{{
augroup rainbow_parentheses_config
  autocmd!
  let g:rainbow#max_level = 16
  let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]
  nnoremap <leader>rp :RainbowParentheses!!<CR>
augroup END
" }}}

" Tagbar.vim {{{
augroup tagbar_config
  autocmd!
  nmap <F8> :TagbarToggle<CR>
augroup END
" }}}

" Gutentags.vim {{{
augroup gutentags_config
  autocmd!
  let g:gutentags_ctags_exclude = ['*.min.js', '*.min.css', 'build', 'vendor', '.git', '*vim/plugged/*']
augroup END
" }}}

" FZF.vim {{{
augroup fzf_config
  autocmd!
  nnoremap <silent> <leader><space> :Files<CR>
  nnoremap <silent> <leader>bs :Buffers<CR>

  " Customize fzf colors to match your color scheme
  let g:fzf_colors =
  \ { 'fg':      ['fg', 'Normal'],
    \ 'bg':      ['bg', '#5f5f87'],
    \ 'hl':      ['fg', 'Comment'],
    \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
    \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
    \ 'hl+':     ['fg', 'Statement'],
    \ 'info':    ['fg', 'PreProc'],
    \ 'border':  ['fg', 'Ignore'],
    \ 'prompt':  ['fg', 'Conditional'],
    \ 'pointer': ['fg', 'Exception'],
    \ 'marker':  ['fg', 'Keyword'],
    \ 'spinner': ['fg', 'Label'],
    \ 'header':  ['fg', 'Comment'] }

  let g:fzf_commits_log_options = '--graph --color=always
    \ --format="%C(yellow)%h%C(red)%d%C(reset)
  \ - %C(bold green)(%ar)%C(reset) %s %C(blue)<%an>%C(reset)"'

  let g:fzf_buffers_jump = 1

  if executable('rg')
    let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --follow --glob "!.git/*"'
    set grepprg=rg\ --vimgrep
    command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
  endif

  if exists('*nvim_open_win')
    let $FZF_DEFAULT_OPTS='--layout=reverse'
    let g:fzf_layout = { 'window': 'call FloatingFZF()' }
  endif

  function! FloatingFZF()
    if exists('*nvim_open_win')
      let buf = nvim_create_buf(v:false, v:true)
      call setbufvar(buf, 'number', 'no')

      let height = float2nr(&lines/2)
      let width = float2nr(&columns - (&columns * 2 / 10))
      "let width = &columns
      let row = float2nr(&lines / 3)
      let col = float2nr((&columns - width) / 3)

      let opts = {
            \ 'relative': 'editor',
            \ 'row': row,
            \ 'col': col,
            \ 'width': width,
            \ 'height':height,
            \ }
      let win =  nvim_open_win(buf, v:true, opts)
      call setwinvar(win, '&number', 0)
      call setwinvar(win, '&relativenumber', 0)
    endif
  endfunction

  " Files + devicons
  function! Fzf_dev()
    let l:fzf_files_options = ' --preview "rougify {2..-1} | head -'.&lines.'"'

    function! s:files()
      let l:files = split(system($FZF_DEFAULT_COMMAND), '\n')
      return s:prepend_icon(l:files)
    endfunction

    function! s:prepend_icon(candidates)
      let l:result = []
      for l:candidate in a:candidates
        let l:filename = fnamemodify(l:candidate, ':p:t')
        let l:icon = WebDevIconsGetFileTypeSymbol(l:filename, isdirectory(l:filename))
        call add(l:result, printf('%s %s', l:icon, l:candidate))
      endfor

      return l:result
    endfunction

    function! s:edit_file(item)
      let l:pos = stridx(a:item, ' ')
      let l:file_path = a:item[pos+1:-1]
      execute 'silent e' l:file_path
    endfunction

    call fzf#run({
          \ 'source': <sid>files(),
          \ 'sink':   function('s:edit_file'),
          \ 'options': '-m ' . l:fzf_files_options,
          \ 'down':    '40%' ,
          \ 'window': 'call FloatingFZF()'})
  endfunction
augroup END
" }}}

" Plugins -------------------------------------------------------------

" Load plugins {{{
  
call plug#begin('$XDG_CONFIG_HOME/vim/plugged')

" Code completion/linting
Plug 'dense-analysis/ale'
Plug 'ervandew/supertab'
Plug 'ludovicchabant/vim-gutentags'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Formatting
Plug 'junegunn/rainbow_parentheses.vim'
Plug 'tpope/vim-commentary'
" Navigation
Plug 'christoomey/vim-tmux-navigator'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
" Language support
Plug 'fatih/vim-go', {'for' : 'go'}
Plug 'rust-lang/rust.vim', {'for': 'rust'}
" UI
Plug 'junegunn/goyo.vim'
Plug 'vim-airline/vim-airline'
Plug 'majutsushi/tagbar'
Plug 'tpope/vim-dispatch'
Plug 'zefei/vim-wintabs'

call plug#end()
" }}}

runtime theme.vim

" Enable top level folds for .vimrc only
" vim:foldmethod=marker:foldlevel=0
