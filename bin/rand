#!/usr/bin/env bash

########## DEFAULTS ############
DEFAULT_CHAR_COUNT=32
DEFAULT_WORD_COUNT=4
DEFAULT_PRONOUNCE_COUNT=8
################################

cmd=${0##*/}

_rand_print_usage() {
  echo "usage: ${cmd} [-cdnpPRsw] [--charset='[:hex:]'] [--word-list=/usr/shar/dict/words]"
  echo ""
  echo "Generate a secure random dataset within a given range" 
  echo "or character set (default is '[:hex:]')"
  echo ""
  echo "Arguments:"
  echo "-c            Character/word count."
  echo "                Default character count: ${DEFAULT_CHAR_COUNT}"
  echo "                Default word count: ${DEFAULT_WORD_COUNT}"
  echo "                Default pronounceable count: ${DEFAULT_PRONOUNCE_COUNT}"
  echo "-d            Generate a random number from a given range (e.g x-y)"
  echo "                if only one number is provided, x defaults to 1"
  echo "--charset     Character set to use"
  echo "-n            Number of strings to generate"
  echo "-p            Generate a password (shorthand for rand --charset='[:graph:]')"
  echo "-P            Generate a pronounceable word"
  echo "-R            Raw random data"
  echo "-w            Random words"
  echo "--word-list   Word list used to generate passphrase"
  echo "--max         Maximum word size"
  echo "--min         Minimum word size"
  echo "-s            Word Seperator"
  echo "                Default: '-'"
}

_rand_shuf() {
  local data opt count _shuf
  local OPTIND=1
  declare -a _shuf
  local optspec="f:n:"

  while getopts "${optspec}" opt; do
    case "${opt}" in
      f) data="${OPTARG}";;
      n) count="${OPTARG}";;
    esac
  done

  if hash shuf 2>/dev/null; then
    _shuf=('shuf' '--random-source=/dev/urandom')
    if [[ -n "${count}" ]]; then
      ${_shuf[*]} "${data}" -n "${count}"
    else
      ${_shuf[*]} "${data}"
    fi
  else
    # Fall back to awk if shuf doesn't exist. It is  
    # slower but still faster than sort --random-sort
    # unsure if this is actually cryptographically secure
    seed=$(LC_ALL=C tr -dc "[:digit:]" < /dev/urandom | command head -c 16)
    awk 'BEGIN {srand('"${seed}"'); OFMT="%.17f"} {print rand(), $0}' "${data}" |
               sort -k1,1n | cut -d ' ' -f2-;
  fi
}

_rand_number() {
  local x="${1}"
  local y="${2}"
  local r

  if [[ -z "${y}" ]]; then
    y="${x}"
    x=1
  fi

  if [[ "${x}" -gt "${y}" ]]; then
    temp="${x}"
    x="${y}"
    y="${temp}"
  fi

  if hash shuf 2>/dev/null; then
    shuf -i "${x}-${y}" -n1 --random-source="/dev/urandom"
  else
    # Read from /dev/urandom directly if shuf does not exist
    # considerably slower
    while :; do
      r=$(LC_ALL=C tr -dc '[:digit:]' < /dev/urandom | command head -c"${#y}")
      if [[ "${r}" -ge "${x}" ]] && [[ "${r}" -le "${y}" ]]; then
        echo "$((r))"
        break
      fi
    done
  fi
}

_rand_generate_pass_phrase() {
  local seperator="-" output count=4 file min max num=1 shuffle
  local OPTIND=1
  local optspec="s:c:f:M:m:"

  declare -a shuffle

  while getopts "${optspec}" opt; do
    case "${opt}" in
      s) seperator="${OPTARG}";;
      c) count="${OPTARG}";;
      f) file="${OPTARG}";;
      M) max="${OPTARG}";;
      m) min="${OPTARG}";;
    esac
  done

  shuffle=('_rand_shuf')

  # if no min or max is set, we can generate only what
  # we need, otherwise we need to keep generating words
  # until we have enough results that meet the criteria 
  if [[ -z "${max}" ]] && [[ -z "${min}" ]]; then
    shuffle+=("-n" "${count}") 
  fi

  while read -r; do
    if [[ "${#REPLY}" -le "${max}" || -z "${max}" ]] &&
      [[ "${#REPLY}" -ge "${min}" || -z "${min}" ]]; then
      
      if [ -n "${output}" ]; then
        output="${output}${seperator}"
      fi

      # Capitalize first letter
      if [ -n "$ZSH_VERSION" ]; then
        output="${output}${(C)REPLY}"
      elif [ -n "$BASH_VERSION" ]; then
        output="${output}${REPLY^}"
      fi

      if [[ "${num}" -ge "${count}" ]]; then
        break
      fi

      ((num++))
    fi
  done < <(${shuffle[*]} -f "${file}")
  echo "${output}"
}

_rand_generate_word() {

  local optspec="M:m:c:"
  local count min max output
  local OPTIND=1

  while getopts "${optspec}" opt; do
    case "${opt}" in
      c) count="${OPTARG}";;
      M) max="${OPTARG}";;
      m) min="${OPTARG}";;
    esac
  done

  local const=('b' 'c' 'd' 'f' 'g' 'h' 'j'
               'k' 'l' 'm' 'n' 'p' 'r' 's' 
               't' 'v' 'w' 'x' 'y' 'z')
  local vowels=('a' 'e' 'i' 'o' 'u')

  if [[ -z "${max}" ]] && [[ -n "${min}" ]]; then
    max="${count}"
  elif [[ -z "${min}" ]] && [[ -n "${max}" ]]; then
    min=2
  elif [[ -z "${min}" ]] && [[ -z "${max}" ]]; then
    max="${count}"
    min="${count}"
  fi
  
  if [[ "${min}" -eq "${max}" ]]; then
    count="${max}"
  else 
    count=$(_rand_number "${min}" "${max}")
  fi

  for ((j=1;j<=count;j++)); do
    if [ $((j % 2)) -eq 0 ]; then
      r=$(_rand_number 0 $((${#vowels[@]}-1)))
      output="${output}${vowels[*]:${r}:1}"
    else
      r=$(_rand_number 0 $((${#const[@]}-1)))
      output="${output}${const[*]:${r}:1}"
    fi
  done
  echo "${output}"
}

_rand() {

  local charset='[:hex:]'
  local num=1
  local seperator="-"
  local count max min mode num range
  local word_list="/usr/share/dict/words"

  local optspec=":-:hpPRwc:s:n:d:"
  local OPTIND=1

  declare -a range 


  while getopts "${optspec}" opt; do
    case "${opt}" in
      -)
        case "${OPTARG}" in
          charset)
            # Indirect expansion that works with ZSH and Bash
            eval "charset=\"\${$OPTIND}\""
            OPTIND=$(( OPTIND + 1 ))
            ;;
          charset=*)
            charset="$(echo "${OPTARG}" | cut -d"=" -f2)"
            ;;
          word-list)
            eval "word_list=\"\${$OPTIND}\""
            OPTIND=$(( OPTIND + 1 ))
            ;;
          word-list=*)
            word_list="$(echo "${OPTARG}" | cut -d"=" -f2)"
            ;;
          help)
            _rand_print_usage
            return
            ;;
          max)
            eval "max=\"\${$OPTIND}\""
            OPTIND=$(( OPTIND + 1 ))
            if [[ ! "${max}" =~ ^[0-9]+$ ]]; then
              printf "${cmd}: argument '%s' expects an integer but recieved '%s'\n" "${OPTARG}" "${max}" 1>&2
              return 1
            fi
            ;;
          min)
            eval "min=\"\${$OPTIND}\""
            OPTIND=$(( OPTIND + 1 ))
            if [[ ! "${min}" =~ ^[0-9]+$ ]]; then
              printf "${cmd}: argument '%s' expects an integer but recieved '%s'\n" "${OPTARG}" "${min}" 1>&2
              return 1
            fi
            ;;
          *)
            echo "${cmd}: unrecognized option '--${OPTARG}'" 1>&2
            return 1
            ;;
          esac
        ;;
      c)
        if [[ "${OPTARG}" =~ ^[0-9]+$ ]]; then
          count="${OPTARG}"
        else 
          printf "${cmd}: argument '%s' expects an integer but recieved '%s'\n" "${opt}" "${OPTARG}" 1>&2
          return 1
        fi
        ;;
      d)
        mode="range"
        if [ -z "$BASH_VERSION" ]; then
          IFS='-,' read -r -A range <<< "${OPTARG}" 
        else
          IFS='-,' read -r -a range <<< "${OPTARG}" 
        fi
        
        if [ "${#range[@]}" -eq 1 ]; then
          range=( 1 "${range[*]}" )
        elif [ "${#range[@]}" -ne 2 ]; then
          printf "${cmd}: Invalid format, expected range: %s\n" "${OPTARG}" 1>&2 
          return 1
        fi
        ;;
      n)
        if [[ "${OPTARG}" =~ ^[0-9]+$ ]]; then
          num="${OPTARG}"
        else 
          printf "${cmd}: argument '%s' expects an integer but recieved '%s'\n" "${opt}" "${OPTARG}" 1>&2
          return 1
        fi
        ;;
      p)
        charset='[:graph:]'
        ;;
      P)
        mode="pronounceable"
        ;;
      s)
        seperator="${OPTARG}"
        ;;
      R)
        mode="raw"
        ;;
      w)
        mode="words"
        ;;
      h)
        _rand_print_usage
        return
        ;;
      :)
        printf "${cmd}: option requires an argument -- %s\n" "${OPTARG}" 1>&2
        return 2
        ;;
      ?)
        printf "${cmd}: unrecognized option '%s'\n" "${OPTARG}" 1>&2
        return 1
        ;;
    esac
  done
  shift $((OPTIND -1))

  if [ -n "${max}" ] && [[ "${min}" -gt "${max}" ]]; then
    printf "rand: min value cannot be greater than max\n" 1>&2
    return 2
  fi

  if [ -z "${count}" ]; then
    if [[ "${mode}" == "words" ]]; then
      count="${DEFAULT_WORD_COUNT}"
    elif [[ "${mode}" == "pronounceable" ]]; then
      count="${DEFAULT_PRONOUNCE_COUNT}" 
    else
      count="${DEFAULT_CHAR_COUNT}"
    fi
  fi

  for ((i=1;i<=num;i++)); do
    case "${mode}" in
      "words")
        run_cmd=("_rand_generate_pass_phrase" "-f" "${word_list}"
                  "-s" "${seperator}" "-c" "${count}")
        ;;
     "pronounceable")
        run_cmd=("_rand_generate_word" "-c" "${count}")
        ;;
      "range")
        run_cmd=("_rand_number" "${range[*]:0:1}" "${range[*]:1:1}") 
        ;;
      "raw")
        run_cmd=("command" "head" "-c" "${count}" "<" "/dev/urandom;" "echo")
        ;;
      *)
        if [[ "${charset}" == "[:hex:]" ]]; then
          od -t x -A n < /dev/urandom | tr -d " \n" | command head -c "${count}"
        else
          LC_ALL=C tr -dc "${charset}" < /dev/urandom | command head -c "${count}"
        fi
        echo ""
        ;;
    esac

    if [[ -n "${run_cmd[*]}" ]]; then 
        if [[ -n "${max}" ]]; then
          run_cmd+=("-M" "${max}")
        fi

        if [[ -n "${min}" ]]; then
          run_cmd+=("-m" "${min}")
        fi
      eval "${run_cmd[*]}"
    fi
  done
  
}

_rand "${@}"
